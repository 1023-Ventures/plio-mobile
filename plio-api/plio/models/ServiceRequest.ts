/* tslint:disable */
/* eslint-disable */
/**
 * Plio.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { exists } from '@1023-ventures/darri-core';

import { 
    Event, 
    EventFromJSON, 
    EventToJSON, 
} from './Event';

export type ServiceRequest = {
    /**
     * 
     * @type {string}
     * @memberof ServiceRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRequest
     */
    concurrency?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRequest
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRequest
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRequest
     */
    note?: string;
    /**
     * 
     * @type {Date}
     * @memberof ServiceRequest
     */
    requestedDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ServiceRequest
     */
    requestedTime?: Date;
    /**
     * 
     * @type {Event}
     * @memberof ServiceRequest
     */
    event?: Event;
}

export const ServiceRequestModel = {
    id: 'id',
    concurrency: 'concurrency',
    userId: 'userId',
    assetId: 'assetId',
    note: 'note',
    requestedDate: 'requestedDate',
    requestedTime: 'requestedTime',
    event: 'event',
    _metadata: {
        id: { type: 'string' },
        concurrency: { type: 'string' },
        userId: { type: 'string' },
        assetId: { type: 'string' },
        note: { type: 'string' },
        requestedDate: { type: 'Date' },
        requestedTime: { type: 'Date' },
        event: { type: 'Event' },
    }
}

export function ServiceRequestFromJSON(json: any): ServiceRequest {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'concurrency': !exists(json, 'concurrency') ? undefined : json['concurrency'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'assetId': !exists(json, 'assetId') ? undefined : json['assetId'],
        'note': !exists(json, 'note') ? undefined : json['note'],
        'requestedDate': !exists(json, 'requestedDate') ? undefined : new Date(json['requestedDate']),
        'requestedTime': !exists(json, 'requestedTime') ? undefined : new Date(json['requestedTime']),
        'event': !exists(json, 'event') ? undefined : EventFromJSON(json['event']),
        
    };
}

export function ServiceRequestToJSON(value?: ServiceRequest): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'concurrency': value.concurrency,
        'userId': value.userId,
        'assetId': value.assetId,
        'note': value.note,
        'requestedDate': value.requestedDate === undefined ? undefined : value.requestedDate.toISOString(),
        'requestedTime': value.requestedTime === undefined ? undefined : value.requestedTime.toISOString(),
        'event': EventToJSON(value.event),
        
    };
}



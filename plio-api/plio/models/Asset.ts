/* tslint:disable */
/* eslint-disable */
/**
 * Plio.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { exists } from '@1023-ventures/darri-core';


export type Asset = {
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    concurrency?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    assetTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    manufacturer?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    manufacturerOther?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    model?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    modelOther?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    modelYear?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    serialNumber?: string;
    /**
     * 
     * @type {Date}
     * @memberof Asset
     */
    purchasedOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    relatedAssetId?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    primaryImageUri?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    primaryImageId?: string;
}

export const AssetModel = {
    id: 'id',
    concurrency: 'concurrency',
    name: 'name',
    assetTypeId: 'assetTypeId',
    manufacturer: 'manufacturer',
    manufacturerOther: 'manufacturerOther',
    model: 'model',
    modelOther: 'modelOther',
    modelYear: 'modelYear',
    serialNumber: 'serialNumber',
    purchasedOn: 'purchasedOn',
    relatedAssetId: 'relatedAssetId',
    primaryImageUri: 'primaryImageUri',
    primaryImageId: 'primaryImageId',
    _metadata: {
        id: { type: 'string' },
        concurrency: { type: 'string' },
        name: { type: 'string' },
        assetTypeId: { type: 'string' },
        manufacturer: { type: 'string' },
        manufacturerOther: { type: 'string' },
        model: { type: 'string' },
        modelOther: { type: 'string' },
        modelYear: { type: 'string' },
        serialNumber: { type: 'string' },
        purchasedOn: { type: 'Date' },
        relatedAssetId: { type: 'string' },
        primaryImageUri: { type: 'string' },
        primaryImageId: { type: 'string' },
    }
}

export function AssetFromJSON(json: any): Asset {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'concurrency': !exists(json, 'concurrency') ? undefined : json['concurrency'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'assetTypeId': !exists(json, 'assetTypeId') ? undefined : json['assetTypeId'],
        'manufacturer': !exists(json, 'manufacturer') ? undefined : json['manufacturer'],
        'manufacturerOther': !exists(json, 'manufacturerOther') ? undefined : json['manufacturerOther'],
        'model': !exists(json, 'model') ? undefined : json['model'],
        'modelOther': !exists(json, 'modelOther') ? undefined : json['modelOther'],
        'modelYear': !exists(json, 'modelYear') ? undefined : json['modelYear'],
        'serialNumber': !exists(json, 'serialNumber') ? undefined : json['serialNumber'],
        'purchasedOn': !exists(json, 'purchasedOn') ? undefined : new Date(json['purchasedOn']),
        'relatedAssetId': !exists(json, 'relatedAssetId') ? undefined : json['relatedAssetId'],
        'primaryImageUri': !exists(json, 'primaryImageUri') ? undefined : json['primaryImageUri'],
        'primaryImageId': !exists(json, 'primaryImageId') ? undefined : json['primaryImageId'],
        
    };
}

export function AssetToJSON(value?: Asset): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'concurrency': value.concurrency,
        'name': value.name,
        'assetTypeId': value.assetTypeId,
        'manufacturer': value.manufacturer,
        'manufacturerOther': value.manufacturerOther,
        'model': value.model,
        'modelOther': value.modelOther,
        'modelYear': value.modelYear,
        'serialNumber': value.serialNumber,
        'purchasedOn': value.purchasedOn === undefined ? undefined : value.purchasedOn.toISOString(),
        'relatedAssetId': value.relatedAssetId,
        'primaryImageUri': value.primaryImageUri,
        'primaryImageId': value.primaryImageId,
        
    };
}



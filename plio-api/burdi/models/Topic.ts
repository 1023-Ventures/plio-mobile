/* tslint:disable */
/* eslint-disable */
/**
 * Burdi.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { exists } from '@1023-ventures/darri-core';


export type Topic = {
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    tenantId?: string;
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    changedBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof Topic
     */
    changedOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    createdBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof Topic
     */
    createdOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    concurrency?: string;
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    topicType?: string;
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    hyperlink?: string;
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    userId?: string;
}

export const TopicModel = {
    id: 'id',
    tenantId: 'tenantId',
    changedBy: 'changedBy',
    changedOn: 'changedOn',
    createdBy: 'createdBy',
    createdOn: 'createdOn',
    concurrency: 'concurrency',
    topicType: 'topicType',
    key: 'key',
    hyperlink: 'hyperlink',
    userId: 'userId',
    _metadata: {
        id: { type: 'string' },
        tenantId: { type: 'string' },
        changedBy: { type: 'string' },
        changedOn: { type: 'Date' },
        createdBy: { type: 'string' },
        createdOn: { type: 'Date' },
        concurrency: { type: 'string' },
        topicType: { type: 'string' },
        key: { type: 'string' },
        hyperlink: { type: 'string' },
        userId: { type: 'string' },
    }
}

export function TopicFromJSON(json: any): Topic {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'tenantId': !exists(json, 'tenantId') ? undefined : json['tenantId'],
        'changedBy': !exists(json, 'changedBy') ? undefined : json['changedBy'],
        'changedOn': !exists(json, 'changedOn') ? undefined : new Date(json['changedOn']),
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'createdOn': !exists(json, 'createdOn') ? undefined : new Date(json['createdOn']),
        'concurrency': !exists(json, 'concurrency') ? undefined : json['concurrency'],
        'topicType': !exists(json, 'topicType') ? undefined : json['topicType'],
        'key': !exists(json, 'key') ? undefined : json['key'],
        'hyperlink': !exists(json, 'hyperlink') ? undefined : json['hyperlink'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        
    };
}

export function TopicToJSON(value?: Topic): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'tenantId': value.tenantId,
        'changedBy': value.changedBy,
        'changedOn': value.changedOn === undefined ? undefined : value.changedOn.toISOString(),
        'createdBy': value.createdBy,
        'createdOn': value.createdOn === undefined ? undefined : value.createdOn.toISOString(),
        'concurrency': value.concurrency,
        'topicType': value.topicType,
        'key': value.key,
        'hyperlink': value.hyperlink,
        'userId': value.userId,
        
    };
}


